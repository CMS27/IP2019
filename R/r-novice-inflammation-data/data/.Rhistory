score = read.csv(file = 'ranking_2016.csv', sep = ';')
score2 = read.csv(file = 'ranking_05022020.csv', sep = ",")
score2 = score2[c('Journal', 'repec1', 'repec2')]
score = merge(score, score2, by = 'Journal', all.x = T)
score = score[which(!is.na(score$repec1)), ]
score$pt = 0
score[which(score$Ranking.2016 == "1"), 'pt'] = 400
score[which(score$Ranking.2016 == "2"), 'pt'] = 200
score[which(score$Ranking.2016 == "3"), 'pt'] = 100
score[which(score$Ranking.2016 == "4"), 'pt'] = 50
score[which(score$Ranking.2016 == "5"), 'pt'] = 25
score = score[c('repec1', 'repec2', 'pt')]
df_new = merge(df,score, by = c('repec1', 'repec2'), all.x = T)
df_new[which(is.na(df_new$pt)), 'pt'] = 0
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt'] =
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt']*1
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt'] =
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt']*0.8
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt'] =
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt']*0.6
df_new[which(df_new$nb_author > 6), 'pt'] = df_new[which(df_new$nb_author > 6), 'pt'] / df_new[which(df_new$nb_author > 6), 'nb_author']
df_new = unique(df_new)
return (df_new)
}
rm(list=ls())
library(rvest)
library(stringr)
library(ggplot2)
library(ggthemes)
numextract <- function(string){
str_extract(string, "<td>\\-*\\d+\\.*\\d</td>")
#str_extract(string, "\\-*\\d+\\.*\\d]")
}
scraping = read_html('https://ideas.repec.org/top/top.journals.recurse10.html')
p = scraping %>%
html_nodes("#ranking")
get_rank <- function(p, repec1, repec2) {
pat = paste0('repec:', repec1, ':', repec2)
pos = floor(gregexpr(pattern = pat, p)[[1]][1])
intstr =  substr(p, pos-30, pos-1)
rank = numextract(intstr)
if (is.na(rank)) {
rank = str_extract(intstr, "<td>[0-9]</td>")
}
rank = as.numeric(substr(rank, 5, nchar(rank)-5))
return(rank)
}
data = read.csv(file = 'repec_review.csv', sep = ';')
data = data[data$Repec != "", ]
del1 = nchar("https://ideas.repec.org/s/")
data$repec1 = substr(data$Repec, del1+1 , del1+3)
data$repec2 = str_remove(substring(data$Repec, del1+5), '.html')
for (i in 1:length(data$Journal)) {
print(i)
data$rank[i] = get_rank(p, data$repec1[i], data$repec2[i])
}
write.csv(data, file="repec_review_ranking.csv", sep = ";")
name = "Cette, Gilbert"
code = get_code_repec(name)
code
name = "Cette, Gilbert"
code = get_code_repec(name)
rm(list=ls())
library(rvest)
library(stringr)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(knitr)
library(doBy)
library(plotly)
get_code_repec = function(name) {
scraping = read_html("https://edirc.repec.org/data/bdfgvfr.html")
p = scraping %>%
html_nodes("#members") %>% html_nodes('li')
for (i in 1:length(p)) {
foo = p[i] %>% html_text()
foo = str_replace(foo, "\n", "")
foo = str_trim(foo)
name = str_trim(name)
pos = floor(gregexpr(pattern = name, foo)[[1]][1])
if (pos != -1) {
link = p[i] %>% html_nodes('a')
beg =  floor(gregexpr(pattern = "ideas.repec", link)[[1]][1])
end = floor(gregexpr(pattern = ".html", link)[[1]][1])
link = substr(link, beg, end+4)
link = paste0('http://', link)
i = length(p)
}
}
return(link)
}
gen_table = function(p) {
df = data.frame(id = c(1:length(p)))
df$name = ""
df$link = ""
df$repec1 = ""
df$repec2 = ""
df$code_paper = ""
df$nb_author = 0
df$year = 0
if (length(p) != 0) {
# To select only article, keep link with /a/
for (i in 1:length(p)) {
df = rbind(df, get_info_article(p[i], df))
}
df = df[df$link != "", ]
}
df = df[, -1]
df = df[which(df$repec2 != ""), ]
return(df)
}
get_info_article=function(p, df) {
df = df[0, ]
links = p %>% html_nodes("b a") %>% html_attr("href")
for (link in links) {
if (substr(link, 1, 5) != "https") {
link = paste0('https://ideas.repec.org', link)
}
link = str_replace(link, "\\.\\.html", "\\.html")
pos = floor(gregexpr(pattern = '/a/', link)[[1]][1])
df_tmp = df[0, ]
if (pos != -1) {
name = p %>%  html_nodes("b a") %>% html_text()
repec = str_remove(substring(link, pos+3), '.html')
repec1 = substr(repec, 1, 3)
end = gregexpr(pattern = '/', substring(repec, 5))[[1]][1]
repec2 = substr(repec, 5, 5+end-2)
code_paper = sub(".*/ *(.*?) *.html.*", "\\1", link)
df_tmp = data.frame(id = 0, link=link, name = name, repec1 = repec1, repec2 = repec2, code_paper = code_paper, nb_author = 0, year = 0)
pos = floor(gregexpr(pattern = '\n', p %>% html_text())[[1]][1])
df_tmp$nb_author  = str_count(substr( p %>% html_text(), 1, pos), pattern = "&")+1
year = str_extract(substr( p %>% html_text(), 1, pos), "\\-*\\d+\\.*\\d")
df_tmp$year = as.numeric(year)
df = rbind(df, df_tmp)
}
}
return(df)
}
compute_new_score = function(df) {
if (length(df$repec1)==0) {
return(0)
}
score = read.csv(file = 'ranking_05022020.csv', sep = ',')
score$pt = 0
score[which(score$rank_bdf == "1*"), 'pt'] = 400
score[which(score$rank_bdf == "1"), 'pt'] = 300
score[which(score$rank_bdf == "2"), 'pt'] = 200
score[which(score$rank_bdf == "3"), 'pt'] = 100
score[which(score$rank_bdf == "4"), 'pt'] = 50
score[which(score$rank_bdf == "5"), 'pt'] = 25
score = score[c('repec1', 'repec2', 'pt')]
df_new = merge(df,score, by = c('repec1', 'repec2'), all.x = T)
df_new[which(is.na(df_new$pt)), 'pt'] = 0
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt'] =
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt']*1
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt'] =
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt']*0.8
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt'] =
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt']*0.6
df_new[which(df_new$nb_author > 6), 'pt'] = df_new[which(df_new$nb_author > 6), 'pt'] / df_new[which(df_new$nb_author > 6), 'nb_author']
df_new = unique(df_new)
return (df_new)
}
compute_old_score = function(df) {
if (length(df$repec1)==0) {
return(0)
}
score = read.csv(file = 'ranking_2016.csv', sep = ';')
score2 = read.csv(file = 'ranking_05022020.csv', sep = ",")
score2 = score2[c('Journal', 'repec1', 'repec2')]
score = merge(score, score2, by = 'Journal', all.x = T)
score = score[which(!is.na(score$repec1)), ]
score$pt = 0
score[which(score$Ranking.2016 == "1"), 'pt'] = 400
score[which(score$Ranking.2016 == "2"), 'pt'] = 200
score[which(score$Ranking.2016 == "3"), 'pt'] = 100
score[which(score$Ranking.2016 == "4"), 'pt'] = 50
score[which(score$Ranking.2016 == "5"), 'pt'] = 25
score = score[c('repec1', 'repec2', 'pt')]
df_new = merge(df,score, by = c('repec1', 'repec2'), all.x = T)
df_new[which(is.na(df_new$pt)), 'pt'] = 0
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt'] =
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt']*1
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt'] =
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt']*0.8
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt'] =
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt']*0.6
df_new[which(df_new$nb_author > 6), 'pt'] = df_new[which(df_new$nb_author > 6), 'pt'] / df_new[which(df_new$nb_author > 6), 'nb_author']
df_new = unique(df_new)
return (df_new)
}
name = "Cette, Gilbert"
code = get_code_repec(name)
code
scraping = read_html(paste0(code, '#research'))
# First scrap downgate
p = scraping %>%
html_nodes("#research .downgate")
df = gen_table(p)
# Second scrap downfree
p = scraping %>%
html_nodes("#research .downfree")
df2 = gen_table(p)
# Third scrap downnone
p = scraping %>%
html_nodes("#research .downnone")
df3 = gen_table(p)
df = rbind(df, df2, df3)
df= unique(df)
if (length(df$repec1) > 0) {
rownames(df) <- 1:nrow(df)
}
df = unique(df)
df = df %>%  mutate(article=paste("<a href=\"",link,"\">",name,"</a>",sep=""))
df = df[c('article', 'repec1', 'repec2', 'nb_author', 'code_paper', 'year')]
df = df[order(df$code_paper, -df$year), ]
df$id = c(1:nrow(df))
df_new = compute_new_score(df)
df_old = compute_old_score(df)
rm(list=ls())
library(rvest)
library(stringr)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(knitr)
library(doBy)
library(plotly)
get_code_repec = function(name) {
scraping = read_html("https://edirc.repec.org/data/bdfgvfr.html")
p = scraping %>%
html_nodes("#members") %>% html_nodes('li')
for (i in 1:length(p)) {
foo = p[i] %>% html_text()
foo = str_replace(foo, "\n", "")
foo = str_trim(foo)
name = str_trim(name)
pos = floor(gregexpr(pattern = name, foo)[[1]][1])
if (pos != -1) {
link = p[i] %>% html_nodes('a')
beg =  floor(gregexpr(pattern = "ideas.repec", link)[[1]][1])
end = floor(gregexpr(pattern = ".html", link)[[1]][1])
link = substr(link, beg, end+4)
link = paste0('http://', link)
i = length(p)
}
}
return(link)
}
gen_table = function(p) {
df = data.frame(id = c(1:length(p)))
df$name = ""
df$link = ""
df$repec1 = ""
df$repec2 = ""
df$code_paper = ""
df$nb_author = 0
df$year = 0
if (length(p) != 0) {
# To select only article, keep link with /a/
for (i in 1:length(p)) {
df = rbind(df, get_info_article(p[i], df))
}
df = df[df$link != "", ]
}
df = df[, -1]
df = df[which(df$repec2 != ""), ]
return(df)
}
get_info_article=function(p, df) {
df = df[0, ]
links = p %>% html_nodes("b a") %>% html_attr("href")
for (link in links) {
if (substr(link, 1, 5) != "https") {
link = paste0('https://ideas.repec.org', link)
}
link = str_replace(link, "\\.\\.html", "\\.html")
pos = floor(gregexpr(pattern = '/a/', link)[[1]][1])
df_tmp = df[0, ]
if (pos != -1) {
name = p %>%  html_nodes("b a") %>% html_text()
repec = str_remove(substring(link, pos+3), '.html')
repec1 = substr(repec, 1, 3)
end = gregexpr(pattern = '/', substring(repec, 5))[[1]][1]
repec2 = substr(repec, 5, 5+end-2)
code_paper = sub(".*/ *(.*?) *.html.*", "\\1", link)
df_tmp = data.frame(id = 0, link=link, name = name, repec1 = repec1, repec2 = repec2, code_paper = code_paper, nb_author = 0, year = 0)
pos = floor(gregexpr(pattern = '\n', p %>% html_text())[[1]][1])
df_tmp$nb_author  = str_count(substr( p %>% html_text(), 1, pos), pattern = "&")+1
year = str_extract(substr( p %>% html_text(), 1, pos), "\\-*\\d+\\.*\\d")
df_tmp$year = as.numeric(year)
df = rbind(df, df_tmp)
}
}
return(df)
}
compute_new_score = function(df) {
if (length(df$repec1)==0) {
return(0)
}
score = read.csv(file = 'ranking_05022020.csv', sep = ',')
score$pt = 0
score[which(score$rank_bdf == "1*"), 'pt'] = 400
score[which(score$rank_bdf == "1"), 'pt'] = 300
score[which(score$rank_bdf == "2"), 'pt'] = 200
score[which(score$rank_bdf == "3"), 'pt'] = 100
score[which(score$rank_bdf == "4"), 'pt'] = 50
score[which(score$rank_bdf == "5"), 'pt'] = 25
score = score[c('repec1', 'repec2', 'pt')]
df_new = merge(df,score, by = c('repec1', 'repec2'), all.x = T)
df_new[which(is.na(df_new$pt)), 'pt'] = 0
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt'] =
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt']*1
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt'] =
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt']*0.8
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt'] =
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt']*0.6
df_new[which(df_new$nb_author > 6), 'pt'] = df_new[which(df_new$nb_author > 6), 'pt'] / df_new[which(df_new$nb_author > 6), 'nb_author']
df_new = unique(df_new)
return (df_new)
}
compute_old_score = function(df) {
if (length(df$repec1)==0) {
return(0)
}
score = read.csv(file = 'ranking_2016.csv', sep = ';')
score2 = read.csv(file = 'ranking_05022020.csv', sep = ",")
score2 = score2[c('Journal', 'repec1', 'repec2')]
score = merge(score, score2, by = 'Journal', all.x = T)
score = score[which(!is.na(score$repec1)), ]
score$pt = 0
score[which(score$Ranking.2016 == "1"), 'pt'] = 400
score[which(score$Ranking.2016 == "2"), 'pt'] = 200
score[which(score$Ranking.2016 == "3"), 'pt'] = 100
score[which(score$Ranking.2016 == "4"), 'pt'] = 50
score[which(score$Ranking.2016 == "5"), 'pt'] = 25
score = score[c('repec1', 'repec2', 'pt')]
df_new = merge(df,score, by = c('repec1', 'repec2'), all.x = T)
df_new[which(is.na(df_new$pt)), 'pt'] = 0
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt'] =
df_new[which(df_new$nb_author == 1 | df_new$nb_author == 2), 'pt']*1
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt'] =
df_new[which(df_new$nb_author == 3 | df_new$nb_author == 4), 'pt']*0.8
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt'] =
df_new[which(df_new$nb_author == 5 | df_new$nb_author == 6), 'pt']*0.6
df_new[which(df_new$nb_author > 6), 'pt'] = df_new[which(df_new$nb_author > 6), 'pt'] / df_new[which(df_new$nb_author > 6), 'nb_author']
df_new = unique(df_new)
return (df_new)
}
weight = 55
weight <- 56
weight
weight
weight + 1
weightlb = 2.2*weightkg
weightkg = 55
weightlb = 2.2*weightkg
c(weightkg, weightlb)
weightkg = 65
c(weightkg, weightlb)
setwd("C:/Users/cms27/Desktop/Github/IP2019/R/r-novice-inflammation-data/data")
ls
d = read.csv(file = "inflammation-01.csv", header = FALSE)
install.packages('IRkernel')
IRkernel::installspec()
setwd("C:/Users/cms27/Desktop/Github/IP2019/R/r-novice-inflammation-data/data")
d = read.csv(file = "inflammation-01.csv", header = FALSE)
install.packages('IRkernel')
install.packages("IRkernel")
# Display the 3 first lines with "head":
head(d, n = 3L)
d
d[1,1]                      # first row, first column
d[c(1, 3, 5), c(10, 20)]    # rows (1, 3 and 5), columns (10 and 20)
d[1:5, 1:2]                   # columns from (1 to 5) and row 1
d[, 1]                      # all columns from row 1
min(d[, 1])               # the min inflammation on day 1
max(d[5, ])               # the max inflammation for patient 5
max(d[, c(4, 8, 12)])     # the max inflammation on days 4, 8 and 12
min(d[c(3, 6), 1:5])      #  the min inflammation for patients 3 and 6 from day 1 to 5
d[, 1]                      # all columns from row 1
d[1:5, 1:2]                   # columns from (1 to 5) and row 1 and 2
d[c(1, 3, 5), c(10, 20)]    # rows (1, 3 and 5), columns (10 and 20)
d[1:5, 1:2]                 # columns from (1 to 5) and row 1 and 2
d[1,1]                      # first row, first column
d[1:5, 1:2]                 # columns from (1 to 5) and row 1 and 2
d[1:5, 1:3]                 # row from 1 to 5 and column 1 to 3
d[1, 1:5]                 # row from 1 to 5 and column 1 to 3
d[1, 1:5]                 # columns from 1 to 5 and row 1
d[c(1, 3, 5), c(10, 20)]    # rows (1, 3 and 5), columns (10 and 20)
d[, 1]                      # all columns from row 1
d[1, ]
d[, 1]                      # all rows from col 1
d[1, ]
d[1, ]                      # all column from col 1
d[1, ]                      # all column from row 1
View(d)
View(d)
d[, 1]                      # all rows from col 1
max(d[5, ])               # the max inflammation for patient 5
max(d[, c(4, 8, 12)])     # the max inflammation on days 4, 8 and 12
min(d[c(3, 6), 1:5])      #  the min inflammation for patients 3 and 6 from day 1 to 5
rowMeans(d[c(2, 4, 10),]) # the mean inflammation for patients 2, 4 and 10
summary(d[, 1:5])
# Exercice: compute in two different ways the mean for the first 10 patients of our data
d[1:10,]
apply(d[1:10,], 1, mean)
rowMeans(d[1:10,])
plot(apply(d, 2, max), xlab = "day", ylab = "maximum", main = "maximum inflammation by day")
boxplot(d, main = "Summary")
# Exercise 2:
min_inf = apply(d,2,min)
plot(min_inf, xlab = "day", ylab = "min", main = "min inflammation by day")
# Exercise 3:
fk <- function(temp_F) {
temp_K <- ((temp_F - 32) * (5 / 9)) + 273.15
return(temp_K)
}
kc <- function(temp_K) {
temp_C <- temp_K - 273.15
return(temp_C)
}
fc <- function(temp_F) {
temp_K <- fk(temp_F)
temp_C <- kc(temp_K)
return(temp_C)
}
# Ex 5:
fence <- function(original, wrapper) {
answer <- c(wrapper, original, wrapper)
return(answer)
}
# Ex 5bis
outside <- function(v) {
first <- v[1]
last <- v[length(v)]
answer <- c(first, last)
return(answer)
}
w = 55
w
w + 1
w+1
# R script
w +1
w
w = 60
w
wkg = 60
wlb = 2.2* wkg
wlb
c(wkg, wlb)
wkg = 100
c(wkg, wlb)
c(wkg, wlb)
setwd("C:/Users/cms27/Desktop/Github/IP2019/R/r-novice-inflammation-data/data")
pwd
ls
cd
d = read.csv(file = "inflammation-01.csv", header = FALSE)
View(d)
View(d)
# Display the 3 first lines with "head":
head(d, n = 3L)
d[1,1]                      # first row, first column
d[1, 1:5]                  # columns from 1 to 5 and row 1
d[, 1]                      # all rows from col 1
min(d[, 1])               # the min inflammation on day 1
max(d[5, ])               # the max inflammation for patient 5
max(d[, c(4, 8, 12)])     # the max inflammation on days 4, 8 and 12
min(d[c(3, 6), 1:5])      #  the min inflammation for patients 3 and 6 from day 1 to 5
rowMeans(d[c(2, 4, 10),]) # the mean inflammation for patients 2, 4 and 10
1
min(d[, 1])               # the min inflammation on day 1
min(d[, 1])               # the min inflammation on day 1
max(d[5, ])               # the max inflammation for patient 5
max(d[, c(4, 8, 12)])     # the max inflammation on days 4, 8 and 12
# Indexing:
d[, 1]
d[5, ]
max(d[5, ])               # the max inflammation for patient 5
min(d[c(3, 6), c(1,2,3,4,5)])      #  the min inflammation for patients 3 and 6 from day 1 to 5
mean(d[c(2, 4, 10),])
mean(d[2, 4, 10])
mean(d[c(2, 4, 10),])
mean(d[2, 4, 10])
mean(d[2, 4])
mean(d[2, 4, 10])
mean(d[2, 4])
rowMeans(d[c(2, 4, 10),]) # the mean inflammation for patients 2, 4 and 10
rowMax(d[c(2, 4, 10),])
rowMaxs(d[c(2, 4, 10),])
max(d[c(2, 4, 10),])
rowMeans(d[c(2, 4, 10),]) # the mean inflammation for patients 2, 4 and 10
summary(d[, 1:5])
apply(d[1:10,], 1, mean)
rowMeans(d[1:10,])
rowMeans(d[c(1:10),])
rowMeans(d[c(1:10),])
rowMeans(d[1:10,])
plot(apply(d, 2, max), xlab = "day", ylab = "maximum", main = "maximum inflammation by day")
plot(apply(d[1:5], 2, max), xlab = "day", ylab = "maximum", main = "maximum inflammation by day")
plot(apply(d[1:5,], 2, max), xlab = "day", ylab = "maximum", main = "maximum inflammation by day")
plot(apply(d[1:2,], 2, max), xlab = "day", ylab = "maximum", main = "maximum inflammation by day")
plot(apply(d[,], 2, max), xlab = "day", ylab = "maximum", main = "maximum inflammation by day")
boxplot(d, main = "Summary")
min
# Exercise 2:
min_inf = apply(d,2,min)
min_inf
plot(min_inf, xlab = "day", ylab = "min", main = "min inflammation by day")
